<*Jeffrey Herbst*>
<define KEYWORDS ("and" "or" "hd" "tl" "ref" "not" "int" "real" "unit" "bool" "list" "let" "in" "end" "while" "do" 
			"if" "then" "else" "val") />
<define TOKEN ((":"":") ("[""]") ("<""=") (">""=") (":""=")) />
<define PARSE CODE.Goal />

<************************************************>
<*Used for part 2. Part 1 just needed LookupVar defined, added the rest from the example*>
<define symTable MAP(ID,"int"|"float"|"bool"|"unit"|"") />

<xform LookupVar pars=(varName) symTableList=GLOBAL.symTable >
	for(p = symTableList; p != NULL; p = TAIL(p)) {
		curTable = HEAD(p);
		res = curTable[varName];
		if (res != "") RETURN res;
	}
</xform>

<xform insert_entry pars=(id,type) symTableList=GLOBAL.symTable >
	(HEAD(symTableList))[id]=type;
	""
</xform>

<xform pop_scope>
	top = HEAD(GLOBAL.symTable);
	GLOBAL.symTable = TAIL(GLOBAL.symTable);
	top
</xform>

<xform push_scope>
	GLOBAL.symTable = MAP{} :: GLOBAL.symTable;
</xform>

<eval print(symTable)/>
<************************************************>
<*Types we will check for*>

<code TypeInt match = CODE.Type > int </code>
<code TypeFloat match = CODE.Type > float </code>
<code TypeBool match = CODE.Type > bool </code>
<code TypeUnit match = CODE.Type > unit </code>
<code TypeList match = CODE.Type > list </code>
<code TypeRef match = CODE.Type > ref </code>
<code TypeNull match = CODE.Type > null </code>
<code TypeError match = CODE.Type > TYPE_ERROR </code>

<code TypePtr pars=(elemtype) match=CODE.Type > [@elemtype@] </code>

<code Type parse=(("int" eval(return TypeInt))
	|("float" eval(return TypeFloat))
	|("[" (t=type) "]" eval(return(TypePtr#(t)))))/>

<************************************************>

<code ATTR pars=(exp, type)/>


<code Listop pars=(op, opd1, opd2, t) match=CODE.Comma> @"new list<"t">("opd1","opd2")"@ </code>
<code List2op pars=(op, opd1, opd2, t) match=CODE.Comma> @"new list<"t">("opd1", new list<"t">("opd2",0))"@  </code>
<code ListCop pars=(op, opd1, opd2, t) match=CODE.Comma> @"new list<"t">("opd1", "opd2")"@ </code>
<code List4op pars=(op, opd1, opd2, opd3, opd4, opd5, t) match=CODE.Comma> 
@"new list<"t">("opd1", new list<"t">("opd2", new list<"t">("opd3", new list<"t">("opd4", "opd5"))))"@
</code>
<code Bop pars=(op, opd1, opd2) match=CODE.Comma> @opd1 op opd2@ </code>
<code Uop pars=(op, opd) match=CODE.Comma> @op opd@ </code>
<code Perenop pars=(opd) match=CODE.Comma> @"("opd")"@ </code>
<code Refop pars=(op, opd) match=CODE.Comma> @opd@ </code>
<code TLop pars=(op, opd) match=CODE.Comma> @op opd@ </code>

<************************************************>

<code Goal pars=(program:LIST(CODE.ExpStmt, "\n"))>
@program@
</code>

<code ExpStmt pars=(exp : CODE.Comma, type)
	parse=(exp ";" eval(return(ExpStmt#(exp[ATTR.exp],exp[ATTR.type]))))>
	@exp@;
</code>

<code Comma parse=(CODE.And (e1=CODE.Comma1) eval(return(e1))) />
<code Comma1 parse=(("," (e1=CODE.And) 
			eval(
				if(INHERIT[ATTR.type] == e1[ATTR.type]) { t = e1[ATTR.type]; }
				else { print("Line " LINE_NO ": type error: " INHERIT " , " e1); t=CODE.TypeError; }
				if(e1[ATTR.exp] == 4) {ATTR#(List4op#(",", 1,2,3,4,0,t),t)}
				else if(e1[ATTR.exp] == 5) {ATTR#(List4op#(",",2,3,4,5,0,t),t)}
				else {ATTR#(Listop#(",", e1[ATTR.exp], INHERIT[ATTR.exp], t), t)}
			)
			(e2=CODE.Comma1) eval(return(e2))) 
		| ("" eval(return(INHERIT)))) />

<code And parse=((CODE.Comp (e1=CODE.And1) eval(return(e1)))) />
<code And1 parse=(("and" (e1=CODE.Comp)
			eval(
				if(INHERIT[ATTR.type]==TypeBool && e1[ATTR.type]==TypeBool) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " and " e1); t=CODE.TypeError }
				ATTR#(Bop#("&&", INHERIT[ATTR.exp], e1[ATTR.exp]),t)	
			) 
			(e2=CODE.And1) eval(return(e2))) 
		| ("or" (e1=CODE.Comp) 
			eval(
				if(INHERIT[ATTR.type]==TypeBool && e1[ATTR.type]==TypeBool) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " or " e1); t=CODE.TypeError }
				ATTR#(Bop#("||", INHERIT[ATTR.exp], e1[ATTR.exp]),t)	
			)
			(e2=CODE.And1) eval(return(e2))) 
		| ("" eval(return(INHERIT)))) />

<code Comp parse=((CODE.Add (e1=CODE.Comp1) eval(return(e1)))) />
<code Comp1 parse=(("<" (e1=CODE.Add) 
			eval(
				if (INHERIT[ATTR.type]==e1[ATTR.type] && INHERIT[ATTR.type]!=TypeError) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError[ATTR.type]) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " < " e1); t=CODE.TypeError }
				ATTR#(Bop#("<", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Comp1) eval(return(e2))) 
		| (">" (e1=CODE.Add) 
			eval(
				if (INHERIT[ATTR.type]==e1[ATTR.type] && INHERIT[ATTR.type]!=TypeError) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " > " e1); t=CODE.TypeError }
				ATTR#(Bop#(">", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Comp1) eval(return(e2))) 
		| ("=" (e1=CODE.Add) 
			eval(
				if (INHERIT[ATTR.type]==e1 && INHERIT[ATTR.type]!=TypeError) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " = " e1); t=CODE.TypeError }
				ATTR#(Bop#("=", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Comp1) eval(return(e2))) 
		| ("<=" (e1=CODE.Add) 
			eval(
				if (INHERIT[ATTR.type]==e1 && INHERIT[ATTR.type]!=TypeError) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " <= " e1); t=CODE.TypeError }
				ATTR#(Bop#("<=", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Comp1) eval(return(e2))) 
		| (">=" (e1=CODE.Add) 
			eval(
				if (INHERIT[ATTR.type]==e1 && INHERIT[ATTR.type]!=TypeError) { t=CODE.TypeBool }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " >= " e1); t=CODE.TypeError }
				ATTR#(Bop#(">=", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Comp1) eval(return(e2))) 
		| ("" eval(return(INHERIT)))) />

<code Add parse=(CODE.Mult (e1=CODE.Add1) eval(return(e1))) />
<code Add1 parse=(("+" (e1=CODE.Mult) 
			eval(
				if (INHERIT[ATTR.type]==TypeInt && e1[ATTR.type]==TypeInt) { t = CODE.TypeInt }
				else if (INHERIT[ATTR.type]==TypeFloat && e1[ATTR.type]==TypeFloat) { t=CODE.TypeFloat }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t = e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " + " e1); t = CODE.TypeError }
				ATTR#(Bop#("+", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Add1) eval(return(e2))) 
		| ("-" (e1=CODE.Mult) 
			eval(
				if (INHERIT[ATTR.type]==TypeInt && e1[ATTR.type]==TypeInt) { t=CODE.TypeInt }
				else if (INHERIT[ATTR.type]==TypeFloat && e1[ATTR.type]==TypeFloat) { t=CODE.TypeFloat }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " - " e1); t=CODE.TypeError }
				ATTR#(Bop#("-", INHERIT[ATTR.exp], e1[ATTR.exp]),t)	
			)
			(e2=CODE.Add1) eval(return(e2))) 
		| ("" eval(return(INHERIT)))) />

<code Mult parse=((CODE.Cons (e1=CODE.Mult1) eval(return(e1)))) />
<code Mult1 parse=(("*" (e1=CODE.Cons) 
			eval(
				if (INHERIT[ATTR.type]==TypeInt && e1[ATTR.type]==TypeInt) { t=CODE.TypeInt }
				else if (INHERIT[ATTR.type]==TypeFloat && e1[ATTR.type]==TypeFloat) { t=CODE.TypeFloat }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t = CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " * " e1); t=CODE.TypeError}	
				ATTR#(Bop#("*", INHERIT[ATTR.exp], e1[ATTR.exp]),t)
			)
			(e2=CODE.Mult1) eval(return(e2))) 
		| ("/" (e1=CODE.Cons)
			eval(
				if (INHERIT[ATTR.type]==TypeInt && e1[ATTR.type]==TypeInt) { t=CODE.TypeInt }
				else if (INHERIT[ATTR.type]==TypeFloat && e1[ATTR.type]==TypeFloat) { t=CODE.TypeFloat }
				else if (INHERIT[ATTR.type]==TypeError && e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if (INHERIT[ATTR.type]==TypeError) { t=e1[ATTR.type] }
				else if (e1[ATTR.type]==TypeError) { t=INHERIT[ATTR.type] }
				else { print("Line " LINE_NO ": type error: " INHERIT " / " e1); t=CODE.TypeError }
				ATTR#(Bop#("/", INHERIT[ATTR.exp], e1[ATTR.exp]),t)		
			)
			(e2=CODE.Mult1) eval(return(e2))) 
		| ("" eval(return(INHERIT)))) />

<code Cons parse=((CODE.Extra (e1=CODE.Cons1) eval(return(e1) ))) />
<code Cons1 parse=(("::" (e1=CODE.Extra)
			eval(
				
				if(INHERIT[ATTR.type]==TypeInt) { t = CODE.TypeInt; }
				else{t=CODE.TypeInt;}
				
				if(e1[ATTR.exp] == "[]") {ATTR#(Listop#("::", INHERIT[ATTR.exp], 0, t), t);}
				else if(e1[ATTR.exp] == 3) {ATTR#(List2op#("[]", INHERIT[ATTR.exp], e1[ATTR.exp],t),t);}
				else {ATTR#(ListCop#("[]", INHERIT[ATTR.exp], e1[ATTR.exp],t),t);}
			)
			(e2=CODE.Cons1) eval(return(e2)))  
		| ("" eval(return(INHERIT)))) />

<code Extra parse=(("-" (e1=CODE.Extra) 
			eval(
				if(e1==TypeInt || e1==TypeFloat) { ; }
				else { print("Line " LINE_NO ": type error: - " e1); e1=TypeError }
				return(e1)
			)) 
		| ("hd" (e1=CODE.Extra) 
			eval(
				if(e1==TypeList#TypeFloat) { e1=TypeFloat }
				else if(e1==TypeList#TypeInt) { e1=TypeInt }	
				else { print("Line " LINE_NO ": type error: hd " e1); e1=TypeError }
				return(e1)
			)) 
		| ("tl" (e1=CODE.Extra) 
			eval(
				
				return(ATTR#(TLop#("tl",e1[ATTR.exp]),e1[ATTR.type]))
			))
		| ("ref" (e1=CODE.Extra) 
			eval(
				if(e1!=TypeError) { t=CODE.TypeRef#(e1); }
				else { t=CODE.TypeError; }
				return(ATTR#(e1[ATTR.exp], t))
			)) 
		| ("!" (e1=CODE.Extra) 
			eval(
				if(e1[ATTR.type]==TypeError) { t=CODE.TypeError }
				else if(e1[ATTR.type]==TypeRef#TypeInt) { t=CODE.TypeInt }
				else if(e1[ATTR.type]==TypeRef#TypeFloat) { t=CODE.TypeFloat }
				<*else { print("Line " LINE_NO ": type error: ! "e1); t=CODE.TypeError }*>
				else {t = CODE.TypeError}
				return(ATTR#(Refop#("!", e1[ATTR.exp]), t))
			)) 
		| ("not" (e1=CODE.Extra) 
			eval(
				if(e1[ATTR.type]==TypeBool) { t=CODE.TypeBool }
				else if(e1[ATTR.type]==TypeError) { t=CODE.TypeError; }
				else { print("Line " LINE_NO ": type error: not " e1); t=CODE.TypeError } 
				return(ATTR#(Uop#("!",e1[ATTR.exp]),t))
			)) 
		| ((e1=CODE.Types) eval(return(e1))) ) />

<code Types parse=(((v=INT) eval(return(CODE.ATTR#(v,TypeInt)))) 
		|((v=FLOAT) eval(return(CODE.ATTR#(v,TypeFloat)))) 
		|((id=ID) eval(
			t=LookupVar(id); 
			if(t=="") { print("Line " LINE_NO ": type error: undefined variable: " id); return(TypeError) }
			else { return(t) } 
			) 
		)
		| ("[]" eval(return(ATTR#("[]",TypeNull)))) 
		| ("[" (e1=CODE.Comma) "]" eval(
			return(ATTR#(e1[ATTR.exp], e1[ATTR.type]))
			))
		| ("(" (e1=CODE.Comma) ")") eval(return(CODE.ATTR#(Perenop#(e1[ATTR.exp]), e1[ATTR.type]))) ) />
