<*Jeffrey Herbst*>

<define KEYWORDS ("and" "or" "hd" "tl" "ref" "not" "int" "real" "unit" "bool" "list" "let" "in" "end" "while" "do" 
			"if" "then" "else" "val") />
<define TOKEN ((":"":") ("[""]") ("<""=") (">""=") (":""=")) />
<define PARSE CODE.Goal />

<* Part 1, Part 2 uses the first bit *>
<code Goal parse=LIST(CODE.Exp,"\n") />

<code Exp parse=((CODE.Split CODE.Exp1)) />
<code Exp1 parse=((";" CODE.Exp1) | (CODE.Exp2) | "") />
<code Exp2 parse=((CODE.Split CODE.Exp1)) />

<code Split parse=((CODE.Comma CODE.Split1) | CODE.If) />
<code Split1 parse=((":=" CODE.Split) | "") />

<code Comma parse=(CODE.And CODE.Comma1) />
<code Comma1 parse=(("," CODE.And CODE.Comma1) | "") />
<code And parse=(CODE.Comp CODE.And1) />
<code And1 parse=(("and" CODE.Comp CODE.And1) | ("or" CODE.Comp CODE.And1) | "") />
<code Comp parse=(CODE.Add CODE.Comp1) />
<code Comp1 parse=(("<" CODE.Add CODE.Comp1) | (">" CODE.Add CODE.Comp1) | ("=" CODE.Add CODE.Comp1) 
		| ("<=" CODE.Add CODE.Comp1) | (">=" CODE.ADD CODE.Comp1) | "") />
<code Add parse=(CODE.Mult CODE.Add1) />
<code Add1 parse=(("+" CODE.Mult CODE.Add1) | ("-" CODE.Mult CODE.Add1) | "") />
<code Mult parse=(CODE.Cons CODE.Mult1) />
<code Mult1 parse=(("*" CODE.Cons CODE.Mult1) | ("/" CODE.Cons CODE.Mult1) | "") />
<code Cons parse=(CODE.Extra CODE.Cons1 ) />
<code Cons1 parse=(("::" CODE.Extra CODE.Cons1)  | "") />
<code Extra parse=(CODE.Extra1 CODE.Type) />
<code Extra1 parse=(("-" CODE.Extra1) | ("hd" CODE.Extra1) | ("tl" CODE.Extra1) 
		| ("ref" CODE.Extra1) | ("!" CODE.Extra1) | ("not" CODE.Extra1) | "" ) />
<code Type parse=(INT | FLOAT | ID | "[]" | ("[" CODE.Comma "]") | ("(" CODE.Exp ")")) />

<* Part 2 *>

<code If parse=(("if" CODE.Comma "then" CODE.Split "else" CODE.Split) | CODE.Let) />
<code Let parse=(("let" CODE.Semi "in" CODE.Exp "end") | CODE.While) />
<code While parse=(("while" CODE.Comma "do" CODE.Split) | CODE.Val) />
<code Val parse=(("val" ID ":" CODE.Name "=" CODE.Split)) />

<code Semi parse=((CODE.Val CODE.Semi1) | "") />
<code Semi1 parse=((";" CODE.Val CODE.Semi1) | ";" | "") />

<code Name parse=((CODE.TypeID CODE.Name1)) />
<code Name1 parse=(("ref" CODE.Name1) | ("list" CODE.Name1) | "") />

<code TypeID parse=("int" | "real" | "unit" | "bool" ) />

